@startuml

skinparam classAttributeIconSize 0

package GGrach.CouponsPdf {
    namespace Handler {
        class OrderHandler {
          + {static} void initialize()
          --
          Слушатели связанные с заказом 
        }
    }

    namespace Validator {
        class CreatorCouponeValidator{
          + {static} bool needGenerateCoupon(int $orderId, int $minSummForGenerate, int $maxSummForGenerate)
          --
          Определяет нужно ли генерировать купон для заказа
        }
    }

    namespace Sender {
        class EmailSender {
          + {static} void sendNotice(array $params = [], array $files = [], string $eventName = 'SEND_DELIVERY_COUPON')
          --
          Отправитель сообщений с флаером
        }
    }

    namespace Generator {
        class PdfGenerator {
          - string $сodeCoupon
          - string $pathFolderForGenerate

          + void constructor(string $сodeCoupon, string $pathFolderForGenerate)
          + string generate(string $couponCode)
          --
          Генерирует PDF файл
        }

        class CouponGenerator {
          - int $userId
          - int $idRuleBasket

          + void constructor(int $userId, int $idRuleBasket)
          + bool generate()
          + bool generateForUser()
          + int getUserId()
          + int getIdRuleBasket()
          --
          Генерирует купоны
        }
    }


    namespace Facade {
        class CouponsPdfFacade {
          - array $rulesGenerateCoupons
          + void addRuleGenerate(int $minSumm, int $maxSumm, int $idRuleBasket)
          + bool handle(int $idOrder, string $pathFolderPdfGenerate, string $viewPdf)
          --
          Объединяет операции генерации и отправки флаера с купоном
        }
    }


    Generator.CouponGenerator --o Facade.CouponsPdfFacade
    Generator.PdfGenerator --o Facade.CouponsPdfFacade
    Validator.CreatorCouponeValidator --o Facade.CouponsPdfFacade
    Sender.EmailSender --o Facade.CouponsPdfFacade

    Facade.CouponsPdfFacade --o Handler.OrderHandler
}

@enduml
